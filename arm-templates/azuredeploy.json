{  
  "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion":"1.0.0.0",
  "parameters":{
        "keyVaultName": {
            "defaultValue": "aibrp-int-kv",
            "type": "String",
            "metadata": {
                "description": "Key Vault name where password is stored."
            }
        },        
        "existingVNETName": {
            "defaultValue": "rez-test-vnet",
            "type": "string",
            "metadata": {
                "description": "Name of the VNET to add a subnet to"
            }
        },
        "newSubnetName": {
            "defaultValue": "sql-app",
            "type": "string",
            "metadata": {
                "description": "Name of the subnet to add"
            }
        },
        "newSubnetAddressPrefix": {
            "type": "string",
            "defaultValue": "172.27.1.0/24",
            "metadata": {
                "description": "Address space of the subnet to add"
            }
        },
        "functionAppName": {
            "defaultValue": "aib-int-sqlrotation-app",
            "type": "String",
            "metadata": {
                "description": "The name of the function app that you wish to create."
            }
		},
		"secretName": {
            "defaultValue": "sqlAdminPassword",
            "type": "String",
            "metadata": {
                "description": "The name of the secret where sql password is stored."
            }
        },
        "repoURL": {
            "defaultValue": "https://github.com/rezmicrosoft/KeyVault-Rotation-SQLPassword-Csharp.git",
            "type": "String",
            "metadata": {
                "description": "The URL for the GitHub repository that contains the project to deploy."
            }
        }
  },
  "variables":{  
     "functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
	 "eventSubscriptionName": "[concat(parameters('keyVaultName'),'-',parameters('secretName'),'-',parameters('functionAppName'))]"
  },
  "resources":[
    {
        "apiVersion": "2019-06-01",
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "name": "[concat(parameters('existingVNETName'), '/', parameters('newSubnetName'))]",
        "location": "[resourceGroup().location]",
        "properties": {
            "addressPrefix": "[parameters('newSubnetAddressPrefix')]",
            "delegations": [
                {
                    "name": "delegation",
                    "properties": {
                        "serviceName": "Microsoft.Web/serverFarms",
                        "actions": [
                            "Microsoft.Network/virtualNetworks/subnets/action"
                        ]
                    }
                }
            ]
        }
    },
     {
        "type":"Microsoft.Storage/storageAccounts",
        "apiVersion":"2019-04-01",
        "name": "[variables('functionStorageAccountName')]",
        "location":"[resourceGroup().location]",
        "sku":{  
           "name":"Standard_LRS",
           "tier":"Standard"
        },
        "kind":"Storage"
     },
     {
        "type":"Microsoft.Web/serverfarms",
        "apiVersion":"2019-08-01",
        "name":"[concat(parameters('functionAppName'))]",
        "location":"[resourceGroup().location]",
        "sku":{  
           "name": "EP1",
           "tier": "ElasticPremium"
        },
        "kind": "elastic",
        "properties": {
            "maximumElasticWorkerCount": 20
        }
     },
     {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[parameters('functionAppName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]"
            ],
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "enabled": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(parameters('functionAppName'))]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~10"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', parameters('functionAppName')), '2018-05-01-preview').InstrumentationKey]"
                        },
                        {
                            "name": "WEBSITE_DNS_SERVER",
                            "value": "168.63.129.16"
                        },
                        {
                            "name": "WEBSITE_VNET_ROUTE_ALL",
                            "value": "1"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "sourcecontrols",
                    "apiVersion": "2019-08-01",
                    "name": "web",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[parameters('repoURL')]",
                        "branch": "master",
                        "IsManualIntegration": true
                    }
                },
                {
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "name": "virtualNetwork",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('existingVNETName'), parameters('newSubnetName'))]",
                        "isSwift": true
                    }
                }
            ]
     },
     {
            "type": "microsoft.insights/components",
            "apiVersion": "2018-05-01-preview",
            "name": "[parameters('functionAppName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "[concat('hidden-link:', resourceId('Microsoft.Web/sites', parameters('functionAppName')))]": "Resource"
            },
            "properties": {
                "ApplicationId": "[parameters('functionAppName')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
     },
     {
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "apiVersion": "2018-02-14",
            "name": "[concat(parameters('keyVaultName'), '/add')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'Full').identity.principalId]",
                        "permissions": {
                            "keys": [],
                            "secrets": [
                                "Get",
                                "List",
                                "Set"
                            ],
                            "certificates": []
                        }
                    }
                ]
            }
	},
    {
            "type": "Microsoft.KeyVault/vaults/providers/eventSubscriptions",
            "apiVersion": "2020-01-01-preview",
            "name": "[concat(parameters('keyVaultName'),'/Microsoft.EventGrid/',variables('eventSubscriptionName'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "[concat('Microsoft.Web/sites/', parameters('functionAppName'),'/sourcecontrols/web')]"
            ],
            "properties": {
                "destination": {
                    "endpointType": "AzureFunction",
                    "properties": {
                        "maxEventsPerBatch": 1,
                        "preferredBatchSizeInKilobytes": 64,
                        "resourceId": "[concat(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'/functions/AKVSQLRotation')]"
                    }
                },
                "filter": {
					"subjectBeginsWith": "[parameters('secretName')]",
      				"subjectEndsWith": "[parameters('secretName')]",
					"includedEventTypes": ["Microsoft.KeyVault.SecretNearExpiry"]
					
                }
            }
        }
  ]
}